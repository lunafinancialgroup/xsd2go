package cmd

import (
	"fmt"
	"os"
	"strings"

	"github.com/urfave/cli"

	"github.com/gocomply/xsd2go/pkg/xsd2go"
)

// Execute ...
func Execute() error {
	app := cli.NewApp()
	app.Name = "GoComply XSD2Go"
	app.Usage = "Automatically generate golang xml parser based on XSD"
	app.Commands = []cli.Command{
		convert,
	}

	return app.Run(os.Args)
}

var convert = cli.Command{
	Name:      "convert",
	Usage:     "convert XSD to golang code to parse xml files generated by given xsd",
	ArgsUsage: "--xsd-file='XSD-FILE' --go-module-import='GO-MODULE-IMPORT' --output-dir='OUTPUT-DIR' --output-file='OUTPUT-FILE' --template-package='TEMPLATE-PACKAGE' --template-name='TEMPLATE-NAME' --xmlns-override='XMLNS=OVERRIDE'",
	Before: func(c *cli.Context) error {
		for _, override := range c.StringSlice("xmlns-override") {
			if !strings.Contains(override, "=") {
				return cli.NewExitError(
					fmt.Sprintf("Invalid xmlns-override: '%s', expecting form of XMLNS=GOPKGNAME", override),
					1)
			}
		}
		return nil
	},
	Action: func(c *cli.Context) error {
		err := xsd2go.Convert(xsd2go.Params{
			XsdPath:         c.String("xsd-file"),
			GoModuleImport:  c.String("go-module-import"),
			OutputDir:       c.String("output-dir"),
			OutputFile:      c.String("output-file"),
			TemplatePackage: c.String("template-package"),
			TemplateName:    c.String("template-name"),
			XmlnsOverrides:  c.StringSlice("xmlns-override"),
		})
		if err != nil {
			return cli.NewExitError(err, 1)
		}
		return nil
	},
	Flags: []cli.Flag{
		cli.StringFlag{
			Name:     "xsd-file",
			Required: true,
			Usage:    "Defines the path of the XSD file to parse. Example: --xsd-file='xsd/sample.xsd'",
		},
		cli.StringFlag{
			Name:  "go-module-import",
			Usage: "Defines the name of the Go Module to use as reference. Example: --go-module-import='user.com/package'",
		},
		cli.StringFlag{
			Name:     "output-dir",
			Required: true,
			Usage:    "Defines the path where to generate code to. Example: --output-dir='output/'",
		},
		cli.StringFlag{
			Name:  "output-file",
			Usage: "Defines the file name to generate code to. Example: --output-file='sample.go'",
		},
		cli.StringFlag{
			Name:     "template-package",
			Required: true,
			Usage:    "Defines where the templates exist in the packaged application. Use \".\" for root-level package. Example: --template-package='rtp'",
		},
		cli.StringFlag{
			Name:     "template-name",
			Required: true,
			Usage:    "Defines template to use for the packaged application. Example: --template-name='element.tmpl'",
		},
		cli.StringSliceFlag{
			Name:  "xmlns-override",
			Usage: "Allows to explicitly set gopackage name for given XMLNS. Example: --xmlns-override='http://www.w3.org/2000/09/xmldsig#=xml_signatures'",
		},
	},
}
