// Code generated by GoComply XSD2Go for Moov; DO NOT EDIT.
// Models for {{ .TargetNamespace }}{{ $prefix := .NsPrefix }}
package {{ .GoPackageName }}

import (
    {{- range .GoImportsNeeded }}
        "{{ . }}"
    {{- end }}

    "github.com/moov-io/rtp20022/pkg/rtp"
)

{{ if .ExportableElements -}}
    // XSD Elements
{{ end -}}
{{ range .ExportableElements }}
    {{ if .IncludeTypeTemplate }}
        {{ InclEType .IncludeTemplateName . }}
    {{ else }}
        type {{ .GoName }} struct {
            XMLName xml.Name
            {{- if .ContainsText }}
                Value {{ .GoTypeName }} `xml:",chardata"`
            {{- end }}
            {{- range .Attributes }}
                {{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
            {{- end }}
            {{- range .Elements }}
                {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .TargetNamespace }} {{ .XmlName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
            {{- end }}
        }

        {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}{{ if ne $prefix "" }}
            // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
            func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
                e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
                {{- range .Elements }}
                    e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ $prefix }}:{{ .XmlName }}"}})
                {{- end }}
                e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
                return nil
            }
        {{ end }}{{ end }}
    {{ end }}
{{ end }}

{{ if .ExportableComplexTypes -}}
    // XSD ComplexType declarations
{{ end }}
{{ range .ExportableComplexTypes }}
    {{ if .IncludeTypeTemplate }}
        {{ InclCType .IncludeTemplateName . }}
    {{ else }}
        type {{ .GoName }} struct {
            {{- if eq .GoName "Document" }}
                XMLName xml.Name
            {{- end }}
            {{- if .ContainsText }}
                Value {{ .GoTypeName }} `xml:",chardata"`
            {{- end }}
            {{- range .Attributes }}
                {{ .GoName }} {{ if eq .Use "optional" }}*{{ end }}{{ .GoForeignModule }}{{ .GoType }} `xml:"{{ .XmlName }},attr{{ if eq .Use "optional" }},omitempty{{ end }}"`
            {{- end }}
            {{- range .Elements }}
                {{- if .IncludeElementTemplate }}
                    {{ InclElem .IncludeTemplateName . }}
                {{- else }}
                    {{ .GoFieldName }} {{ if .Array }}[]{{ end }}{{ if eq .MinOccurs "0" }}*{{ end }}{{ .GoForeignModule }}{{ .GoTypeName }} `xml:"{{ .TargetNamespace }} {{ .XmlName }}{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
                {{- end }}
            {{- end }}
            {{- if .Sequence }}
                {{- range .Sequence.Any }}
                    Item {{ if eq .MinOccurs "0" }}*{{ end }}string `xml:",any{{ if eq .MinOccurs "0" }},omitempty{{ end }}"`
                {{- end }}
            {{- end }}
        }

        {{ $elemLen := len .Elements }}{{ if gt $elemLen 0 }}{{ if ne $prefix "" }}
            // MarshalXML is a custom marshaller that allows us to manipulate the XML tag in order to use the proper namespace prefix
            func (v {{ .GoName }}) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
                e.EncodeToken(xml.StartElement{Name: xml.Name{Local: start.Name.Local}})
                {{- range .Elements }}
                    e.EncodeElement(v.{{ .GoFieldName }}, xml.StartElement{Name: xml.Name{Local: "{{ $prefix }}:{{ .XmlName }}"}})
                {{- end }}
                e.EncodeToken(xml.EndElement{Name: xml.Name{Local: start.Name.Local}})
                return nil
            }
        {{ end }}{{ end }}
    {{ end }}
{{ end }}

{{ if .ExportableSimpleTypes -}}
    // XSD SimpleType declarations
{{ end }}
{{ range .ExportableSimpleTypes }}
    {{ if .IncludeTypeTemplate }}
        {{ InclSType .IncludeTemplateName . }}
    {{ else }}
        type {{ .GoName }} {{ .GoTypeName }}
    {{ end }}

    {{- $simpleType := . -}}
    {{- range .Enums }}
        const {{ $simpleType.GoName -}} {{- .GoName }} {{ $simpleType.GoName }} = "{{ .XmlName }}"
    {{- end }}
{{ end }}
